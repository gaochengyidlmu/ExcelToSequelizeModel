/* eslint-disable */

const
    Sequelize = require('sequelize')
  , cfg = require('../config/appconfig/<%= cfgFileName %>')
  , flowCfg = require('../config/appconfig/flowCfg')
  ;

module.exports = (sequelize)=>{
<%

  let assArr = [], tableName;
  for(let i = 0, len = files.length; i < len; i++){
    let data = files[i].data;
    data.shift();
    tableName = data[0][3]

//    if(i==3)console.log('data: ',data)
%>
  const <%- tableName %> = sequelize.define("<%- tableName %>", {
  <%
      let _id, _note, _type, _primary, _foreign, _toTable, _As, _scopeField, _description, _default, _noAllowNull, _unique, _index, _readOnly, _values, _middle, _middle1, _middle2 ;

      for (let titleInx = 1, titleLen = data[1].length; titleInx < titleLen; titleInx++){

          switch (data[1][titleInx]){
              case '字段名':
                  _id = titleInx;
                  break;
              case '字段描述':
                  _note = titleInx;
                  break;
              case '字段类型':
                  _type = titleInx;
                  break;
              case '主键':
                  _primary = titleInx;
                  break;
              case '外键':
                  _foreign = titleInx;
                  break;
              case '对应表':
                  _toTable = titleInx;
                  break;
              case 'As':
                  _As = titleInx;
                  break;
              // 兼容 as
              case 'as':
                  _As = titleInx;
                  break;
              case 'scopeField':
                  _scopeField = titleInx;
                  break;
              case '示例':
                  _description = titleInx;
                  break;
              case '默认值':
                  _default = titleInx;
                  break;
              case '必填项':
                  _noAllowNull = titleInx;
                  break;
              case 'unique':
                  _unique = titleInx;
                  break;
              case 'index':
                  _index = titleInx;
                  break;
              case 'readOnly':
                  _readOnly = titleInx;
                  break;
              case 'ENUM-Values':
                  _values = titleInx;
                  break;
              case '备注':
                  _middle = titleInx;
                  break;
              case '创建人':
                  _middle1 = titleInx;
                  break;
              case '创建时间':
                  _middle2 = titleInx;
                  break;
          }
      }


  let fieldArr = data.slice(2, data.length);
  //foreignFlag:true => 对于非中间表需要计算外键
  //foreignFlag:false => 对于中间表不需要计算外键
  let generator = (foreignFlag)=>{
    for(let j = 0, _len = fieldArr.length; j < _len; j++){
      let field = fieldArr[j];

      //当id存在且不为createdAt、updatedAt时才能继续
      if(common.isExist(field[_id]) && ['createdAt','updatedAt'].indexOf(field[_id]) == -1 ){
        //当不为外键时
        if(field[_foreign] !== '√' && field[_foreign] !== 'one'){%>  <%-field[_id] %>: {type: Sequelize.<%- field[_type] %> <%/* ENUM 的值 */ if (field[_type] === 'ENUM') { %>, values: Object.values(<%- field[_values]%>) <% }%>,<% /*主键时*/if(field[_primary] == '√'){ %> primaryKey: true,<% if(field[_type]==='INTEGER'){%> autoIncrement: true ,<%}} %><% /*有默认值时*/if(common.isExist(field[_default])){ %> defaultValue: <%- field[_default] %>, <%}%><% /*不允许为空时*/if(field[_noAllowNull] == '√'){ %> allowNull: false, <%} %><% /*独一unique时*/if(field[_unique] == '√'){ %> unique: true, <%} %><% /*联合unique时*/if(field[_unique] != '√' && common.isExist(field[_unique])){ %> unique: '<%= field[_unique]%>', <%} %><% /*只读，不用编辑时*/if(field[_readOnly] == '√'){ %> readOnly: true, <%} %><% /*范例*/if(common.isExist(field[_description])){ console.log('description: ', field[_description])%> _description: '<%=field[_description]%>', <%} %>}, // <%- field[_note] %>，<%- field[_middle] %>
  <%}else {
        //当为外键时，将对应的语句push入assArr关联数组中
        // 判断，是一对多还是一对一
        let operation1, operation2

        if (field[_foreign] === '√') {
          operation1 = 'belongsTo'
          operation2 = 'hasMany'
        }
        if (field[_foreign] === 'one') {
          operation1 = 'belongsTo'
          operation2 = 'hasOne'
        }


        let temArr = [];
        temArr[0] = `models.${tableName}.${operation1}(models.${field[_toTable]}, {foreignKey: {name: '${field[_id]}'`;
        temArr[1] = `models.${field[_toTable]}.${operation2}(models.${tableName}, {foreignKey: {name: '${field[_id]}'`;

        let addStr = '});';
        /*为必选项时*/
        if(field[_noAllowNull] == '√') {
            temArr[0] += `, allowNull: false`;
            temArr[1] += `, allowNull: false`;
        }
        /*只读，不用编辑时*/
        if(field[_readOnly] == '√') {
            temArr[0] += `, readOnly : true`;
            temArr[1] += `, readOnly : true`;
        }

        if (common.isExist(field[_scopeField])){
            temArr[0] += `}, constraints: false, as: '${field[_toTable]}'`
            temArr[1] += `}, constraints: false, scope: { ${field[_scopeField]}: '${field[_toTable]}'}`
        }else{
          temArr[0] += '}';
          temArr[1] += '}';
        }


        if (common.isExist(field[_As])){
          temArr[0] += `, as: '${field[_As]}'`;
          let asStr = operation2 === 'hasMany' ? pluralize.plural(field[_As]) : field[_As]
          temArr[1] += `, as: '${asStr}'`;
        }

        temArr[0] += addStr;
        temArr[1] += addStr;

        assArr = assArr.concat(temArr);
        assArr.push('' +
                '')

      }
      }
    }
  }
  let cIndex = ()=>{
    for(let j = 0, _len = fieldArr.length; j < _len; j++) {
      let field = fieldArr[j];

      //当id存在，且不为createdAt、updatedAt、且不为外键、且index存在才能继续
      if(common.isExist(field[_id])
        && ['createdAt','updatedAt'].indexOf(field[_id]) == -1
        && field[_foreign] !== '√'
        && field[_index] === '√'
      ){%>{method: 'BTREE',fields: ['<%= field[_id] %>']},
      <%}
    }
  }
    //当不是中间表时
    if(data[0][_middle] !== '中间表'){
      generator()
    }else{
      //为中间表时
      let temp1 = `models.${data[0][_middle1]}.belongsToMany(models.${data[0][_middle2]}, {through: {model: models.${tableName}, unique: false}});`;
      let temp2 = `models.${data[0][_middle2]}.belongsToMany(models.${data[0][_middle1]}, {through: {model: models.${tableName}, unique: false}});`;
      assArr.push(temp1);
      assArr.push(temp2);
      assArr.push('' +
              '')
      generator()
    }
  %>},{
    freezeTableName: true,
    indexes:[
      <%cIndex()%>
    ],
    description: '<%=data[0][_description]%>'
  });
<% }
cb(assArr) %>};
